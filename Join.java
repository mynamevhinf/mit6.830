package simpledb;
import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    Tuple currTuple1;
    TupleDesc joinTd;
    OpIterator[] childs;
    JoinPredicate predicate;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        predicate = p;
        childs = new OpIterator[]{child1, child2};
        joinTd = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return childs[0].getTupleDesc().getFieldName(predicate.field1);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return childs[1].getTupleDesc().getFieldName(predicate.field2);
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        if (joinTd != null)
            return joinTd;
        joinTd = TupleDesc.merge(childs[0].getTupleDesc(), childs[1].getTupleDesc());
        return joinTd;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        childs[0].open();
        childs[1].open();
    }

    public void close() {
        super.close();
        childs[0].close();
        childs[1].close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        childs[0].rewind();
        childs[1].rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        Tuple tuple1, tuple2;
        OpIterator iter1 = childs[0];
        OpIterator iter2 = childs[1];
        while (true) {
            tuple1 = currTuple1;
            if (tuple1 == null) {
                if (!iter1.hasNext())
                    return null;
                tuple1 = iter1.next();
            }

            while (iter2.hasNext()) {
                tuple2 = iter2.next();
                if (predicate.filter(tuple1, tuple2)) {
                    currTuple1 = tuple1;
                    return joinTuple(tuple1, tuple2);
                }
            }

            currTuple1 = null;
            iter2.rewind();
        }
    }

    private Tuple joinTuple(Tuple tuple1, Tuple tuple2)
    {
        TupleDesc td = getTupleDesc();
        Tuple joinedTuple = new Tuple(td);

        int idx = tuple1.getTupleDesc().numFields();
        Field[] fields = Arrays.copyOf(tuple1.getFields(), idx + tuple2.getTupleDesc().numFields());
        Iterator<Field> iterator = tuple2.fields();
        while (iterator.hasNext())
            fields[idx++] = iterator.next();
        joinedTuple.setFields(fields);
        return joinedTuple;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return childs;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        childs = children;
    }

}
